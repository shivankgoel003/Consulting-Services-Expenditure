LLM: ChatGPT 3.5
Date: 22 January 2024


This is the overview of chat with Language Learning Model ChatGPT for helping me with writing the research paper.

The majority of help was related to code debugging and understanding the concepts. 

Here is the summary of questions asked:
1. Some of my values in column data are enclosed in brackets, how to remove them?
2. How can i use facet to merge all graphs  into one?
3. My table 2 is going out of bounds, how shall i fit?
4. I am getting y-axis as 1e+072e+073e+074e+07 , can you change


User Shivank:

library(tidyverse)
library(janitor)
library(readxl)
library(dplyr)

#### Clean data ####


#### Reading data ####


#reading 2021 expenditure data
expenditure_data_2021 = read_excel("inputs/data/2017-2021-consulting-database-xlsx.xlsx", sheet = 5, range = "A2:J529")
#reading 2020 expenditure data
expenditure_data_2020 = read_excel("inputs/data/2017-2021-consulting-database-xlsx.xlsx", sheet = 4, range = "A2:J430")
#reading 2019 expenditure data
expenditure_data_2019 = read_excel("inputs/data/2017-2021-consulting-database-xlsx.xlsx", sheet = 3, range = "A3:J438")
#reading 2018 expenditure data
expenditure_data_2018 = read_excel("inputs/data/2017-2021-consulting-database-xlsx.xlsx", sheet = 2, range = "A3:J312")
#reading 2017 expenditure data
expenditure_data_2017 = read_excel("inputs/data/2017-2021-consulting-database-xlsx.xlsx", sheet = 1, range = "A3:J268")


# Simplified names
cleaned_expenditure_data_2021 = clean_names(expenditure_data_2021)
cleaned_expenditure_data_2020 = clean_names(expenditure_data_2020)
cleaned_expenditure_data_2019 = clean_names(expenditure_data_2019)
cleaned_expenditure_data_2018 = clean_names(expenditure_data_2018)
cleaned_expenditure_data_2017 = clean_names(expenditure_data_2017)

i am cleaning my data, and my Expenditure columns are now simplifies to x2021_expenditure, x2020_expenditure,, so on. But some of the values in columns have are enclosed in round brackets, I want to remove thoxse brackets to simplify them to just numerical values


Chat gpt : To remove the round brackets from the expenditure columns in your cleaned data frames, you can use the mutate function from the dplyr package along with stringr for string manipulation. Here's how you can do it for one data frame, and you can repeat the process for the others:

R
Copy code
library(tidyverse)
library(janitor)
library(readxl)

# Your code for reading and cleaning data goes here...

# Remove round brackets from expenditure columns in 2021 data
cleaned_expenditure_data_2021 <- cleaned_expenditure_data_2021 %>%
  mutate(across(starts_with("x2021_expenditure"), 
                ~ as.numeric(str_remove_all(., "\\(|\\)"))))

# Repeat the process for other data frames (2020, 2019, 2018, 2017)
cleaned_expenditure_data_2020 <- cleaned_expenditure_data_2020 %>%
  mutate(across(starts_with("x2020_expenditure"), 
                ~ as.numeric(str_remove_all(., "\\(|\\)"))))

cleaned_expenditure_data_2019 <- cleaned_expenditure_data_2019 %>%
  mutate(across(starts_with("x2019_expenditure"), 
                ~ as.numeric(str_remove_all(., "\\(|\\)"))))

cleaned_expenditure_data_2018 <- cleaned_expenditure_data_2018 %>%
  mutate(across(starts_with("x2018_expenditure"), 
                ~ as.numeric(str_remove_all(., "\\(|\\)"))))

cleaned_expenditure_data_2017 <- cleaned_expenditure_data_2017 %>%
  mutate(across(starts_with("x2017_expenditure"), 
                ~ as.numeric(str_remove_all(., "\\(|\\)"))))

# Now, your expenditure columns in all data frames should only contain numerical values
This code uses the across function to apply the same transformation to multiple columns that match a pattern (e.g., columns starting with "x2021_expenditure"). The str_remove_all function from the stringr package is used to remove all occurrences of round brackets from the specified columns, and as.numeric is used to convert the cleaned values to numeric format.



User
```{r}
#| echo: false
#| message: false
#| tbl-cap: Sample of cleaned Consulting Expenditure Data 2017-2021

# Load the dplyr package
library(dplyr)

# Plotting average expenditure by expense category for all years
ggplot(cleaned_expenditure_data_2021, aes(x = expense_category, y = x2021_expenditure, fill = expense_category)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Expenditure by Expense Category (2021)",
       x = "Expense Category",
       y = "Average Expenditure ($)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(labels = scales::comma)  

 ggplot(cleaned_expenditure_data_2020, aes(x = expense_category, y = x2020_expenditure, fill = expense_category)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Expenditure by Expense Category (2020)",
       x = "Expense Category",
       y = "Average Expenditure ($)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(labels = scales::comma)  

ggplot(cleaned_expenditure_data_2019, aes(x = expense_category, y = x2019_expenditure, fill = expense_category)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Expenditure by Expense Category (2019)",
       x = "Expense Category",
       y = "Average Expenditure ($)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(labels = scales::comma)  

 ggplot(cleaned_expenditure_data_2018, aes(x = expense_category, y = x2018_expenditure, fill = expense_category)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Expenditure by Expense Category (2018)",
       x = "Expense Category",
       y = "Average Expenditure ($)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(labels = scales::comma)  

 ggplot(cleaned_expenditure_data_2017, aes(x = expense_category, y = x2017_expenditure, fill = expense_category)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Expenditure by Expense Category (2017)",
       x = "Expense Category",
       y = "Average Expenditure ($)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(labels = scales::comma)  



how can i use facet to merge all these into one


You can use the facet_wrap() function in ggplot2 to create a faceted plot that combines all the individual plots into one. Here's how you can modify your code to achieve this:

{r}
Copy code
# Load the dplyr and ggplot2 packages
library(dplyr)
library(ggplot2)

# Combine all the data into one dataframe with an additional column for the year
cleaned_expenditure_data_combined <- bind_rows(
  mutate(cleaned_expenditure_data_2021, year = 2021),
  mutate(cleaned_expenditure_data_2020, year = 2020),
  mutate(cleaned_expenditure_data_2019, year = 2019),
  mutate(cleaned_expenditure_data_2018, year = 2018),
  mutate(cleaned_expenditure_data_2017, year = 2017)
)

# Plotting average expenditure by expense category with facet_wrap
ggplot(cleaned_expenditure_data_combined, aes(x = expense_category, y = get(paste0("x", year, "_expenditure")), fill = expense_category)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Expenditure by Expense Category",
       x = "Expense Category",
       y = "Average Expenditure ($)",
       subtitle = "2017-2021") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(labels = scales::comma) +
  facet_wrap(~year, scales = "free_y")  # Facet by year with independent y-axes
This code combines all the data into one dataframe and uses the facet_wrap() function to create a faceted plot by the "year" column. The scales = "free_y" argument ensures that each facet has its own y-axis scale.



User: 
```{r}
#| echo: false
#| message: false
#| warning: false

budget_type_summary <- 
  cleaned_expenditure_data_2021 %>%
  group_by(budget_type) %>%
  summarise(
    total_expenditure = sum(x2021_expenditure),
    average_expenditure = mean(x2021_expenditure),
    max_expenditure = max(x2021_expenditure),
    min_expenditure = min(x2021_expenditure)
  )
cat("## Table 2: Summary of 2021 Consulting Expenditure by Budget Type\n")
options(kableExtra.latex.max.width=1)
budget_type_summary %>% 
  kable(col.names = c("Budget Type", "Total Expenditure", "Average Expenditure", "Maximum Expenditure", "Minimum Expenditure"), "latex") %>%
  kable_styling("latex", full_width = FALSE)

cleaned_expenditure_data_2021 = cleaned_expenditure_data_2021 %>%
  rename(EXPENDITURE = x2021_expenditure)

cleaned_expenditure_data_2020 =  cleaned_expenditure_data_2020 %>%
  rename(EXPENDITURE = x2020_expenditure)

cleaned_expenditure_data_2019 = cleaned_expenditure_data_2019 %>%
  rename(EXPENDITURE = x2019_expenditure)

cleaned_expenditure_data_2018 = cleaned_expenditure_data_2018 %>%
  rename(EXPENDITURE = x2018_expenditure)

cleaned_expenditure_data_2017 = cleaned_expenditure_data_2017 %>%
  rename(EXPENDITURE = x2017_expenditure)


combined_data <- bind_rows(
  cleaned_expenditure_data_2017 %>% mutate(Year = 2017),
  cleaned_expenditure_data_2018 %>% mutate(Year = 2018),
  cleaned_expenditure_data_2019 %>% mutate(Year = 2019),
  cleaned_expenditure_data_2020 %>% mutate(Year = 2020),
  cleaned_expenditure_data_2021 %>% mutate(Year = 2021)
)


```/

my table 2 is going out of bounds, how shall i fit


ChatGPT: 
It seems that the table is going out of bounds in your LaTeX document. To address this issue, you can try a few solutions:

Reduce Font Size: You can reduce the font size of the table to make it fit within the page. You can add the size option to the kable_styling function. For example, set latex_options = c("striped", "scale_down", "size").

r
Copy code
kable_styling(latex_options = c("striped", "scale_down", "size"))
Rotate Headers: You can rotate the headers of the table to save horizontal space. Use the rotate_box function from the kableExtra package.

r
Copy code
kable_styling(latex_options = c("striped", "scale_down")) %>%
column_spec(1:5, angle = -45)
Adjust Column Widths: You can manually set the column widths to make the table fit better.

r
Copy code
kable_styling(latex_options = c("striped", "scale_down")) %>%
column_spec(1:5, width = "1cm")  # Adjust the width as needed
Experiment with these options and see which combination works best for your document. Additionally, you may want to consider whether the table needs to be split into multiple smaller tables or if any information can be omitted to improve readability.




```{r}
#| echo: false
#| message: false
#| tbl-cap: Sample of cleaned Consulting Expenditure Data 2021

# Plotting average expenditure by expense category for 2021
ggplot(cleaned_expenditure_data_2021, aes(x = expense_category, y = x2021_expenditure, fill = expense_category)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Expenditure by Expense Category (2021)",
       x = "Expense Category",
       y = "Average Expenditure ($)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

User: I am getting y-axis as 1e+072e+073e+074e+07 , can you change

ChatGPT: It appears that the y-axis labels are being displayed in scientific notation, which might not be visually appealing for your plot. To change this and display the y-axis labels in a more readable format, you can use the scale_y_continuous() function and specify the labels argument. Here's an updated version of your R code:

{r}
Copy code
#| echo: false
#| message: false
#| tbl-cap: Sample of cleaned Consulting Expenditure Data 2021

# Plotting average expenditure by expense category for 2021
ggplot(cleaned_expenditure_data_2021, aes(x = expense_category, y = x2021_expenditure, fill = expense_category)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Expenditure by Expense Category (2021)",
       x = "Expense Category",
       y = "Average Expenditure ($)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(labels = scales::comma)  # This line formats y-axis labels with commas
The scale_y_continuous(labels = scales::comma) function uses the comma formatter from the scales package to display y-axis labels with commas for better readability. Adjusting the formatting in this way should resolve the issue of displaying excessively large values in scientific notation on the y-axis.




